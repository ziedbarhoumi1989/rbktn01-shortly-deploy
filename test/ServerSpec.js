var request = require("supertest"), express = require("express"), expect = require("chai").expect, app = require("../server-config.js"), db = require("../app/config"), User = require("../app/models/user"), Link = require("../app/models/link"); describe("", function () { beforeEach(function (a) { request(app).get("/logout").end(function (b, c) { Link.remove({ url: "http://www.roflzoo.com/" }).exec(), User.remove({ username: "Savannah" }).exec(), User.remove({ username: "Phillip" }).exec(), a() }) }), describe("Link creation: ", function () { it("Only shortens valid urls, returning a 404 - Not found for invalid urls", function (a) { request(app).post("/links").send({ url: "definitely not a valid url" }).expect(404).end(a) }), describe("Shortening links:", function () { it("Responds with the short code", function (a) { request(app).post("/links").send({ url: "http://www.roflzoo.com/" }).expect(200).expect(function (a) { expect(a.body.url).to.equal("http://www.roflzoo.com/"), expect(a.body.code).to.be.ok }).end(a) }), it("New links create a database entry", function (a) { request(app).post("/links").send({ url: "http://www.roflzoo.com/" }).expect(200).expect(function (a) { Link.findOne({ url: "http://www.roflzoo.com/" }).exec(function (a, b) { a && console.log(a), expect(b.url).to.equal("http://www.roflzoo.com/") }) }).end(a) }), it("Fetches the link url title", function (a) { request(app).post("/links").send({ url: "http://www.roflzoo.com/" }).expect(200).expect(function (a) { Link.findOne({ url: "http://www.roflzoo.com/" }).exec(function (a, b) { a && console.log(a), expect(b.title).to.equal("Funny pictures of animals, funny dog pictures") }) }).end(a) }) }), describe("With previously saved urls: ", function () { beforeEach(function (a) { link = new Link({ url: "http://www.roflzoo.com/", title: "Funny pictures of animals, funny dog pictures", baseUrl: "http://127.0.0.1:4568", visits: 0 }), link.save(function () { a() }) }), it("Returns the same shortened code if attempted to add the same URL twice", function (a) { var b = link.code; request(app).post("/links").send({ url: "http://www.roflzoo.com/" }).expect(200).expect(function (a) { var c = a.body.code; expect(c).to.equal(b) }).end(a) }), it("Shortcode redirects to correct url", function (a) { var b = link.code; request(app).get("/" + b).expect(302).expect(function (a) { var b = a.headers.location; expect(b).to.equal("http://www.roflzoo.com/") }).end(a) }) }) }), describe("Priviledged Access:", function () { it("Redirects to login page if a user tries to access the main page and is not signed in", function (a) { request(app).get("/").expect(302).expect(function (a) { expect(a.headers.location).to.equal("/login") }).end(a) }), it("Redirects to login page if a user tries to create a link and is not signed in", function (a) { request(app).get("/create").expect(302).expect(function (a) { expect(a.headers.location).to.equal("/login") }).end(a) }), it("Redirects to login page if a user tries to see all of the links and is not signed in", function (a) { request(app).get("/links").expect(302).expect(function (a) { expect(a.headers.location).to.equal("/login") }).end(a) }) }), describe("Account Creation:", function () { it("Signup creates a new user", function (a) { request(app).post("/signup").send({ username: "Svnh", password: "Svnh" }).expect(302).expect(function () { User.findOne({ username: "Svnh" }).exec(function (a, b) { expect(b.username).to.equal("Svnh") }) }).end(a) }), it("Successful signup logs in a new user", function (a) { request(app).post("/signup").send({ username: "Phillip", password: "Phillip" }).expect(302).expect(function (a) { expect(a.headers.location).to.equal("/"), request(app).get("/logout").expect(200) }).end(a) }) }), describe("Account Login:", function () { beforeEach(function (a) { new User({ username: "Phillip", password: "Phillip" }).save(function () { a() }) }), it("Logs in existing users", function (a) { request(app).post("/login").send({ username: "Phillip", password: "Phillip" }).expect(302).expect(function (a) { expect(a.headers.location).to.equal("/") }).end(a) }), it("Users that do not exist are kept on login page", function (a) { request(app).post("/login").send({ username: "Fred", password: "Fred" }).expect(302).expect(function (a) { expect(a.headers.location).to.equal("/login") }).end(a) }) }) });